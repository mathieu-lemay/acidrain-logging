[project]
name = "acidrain-logging"
version = "0.2.0"
description = "A logging configuration library"
authors = [
    { name = "Mathieu Lemay", email = "acidrain1@gmail.com" }
]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.11,<4"
dependencies = [
    "importlib-metadata (>=8.0.0,<8.7.0)",
    "orjson (>=3.9.6,<4.0.0)",
    "pydantic (>=2.5.3,<3.0.0)",
    "pydantic-settings (>=2.2.0,<3.0.0)",
    "structlog (>=25.1.0,<26.0.0)",
]

[dependency-groups]
dev = [
    "celery-types>=0.23.0",
    "faker>=37.4.0",
    "httpx>=0.28.1",
    "mypy>=1.16.1",
    "polyfactory>=2.22.0",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.0.0",
    "pytest-cov>=6.2.1",
    "pytest-docker>=3.2.3",
    "pytest-freezer>=0.4.9",
    "pytz>=2025.2",
    "setuptools>=80.9.0", # HACK: Needed for PyCharm
    "tenacity>=9.1.2",
    "types-pytz>=2025.2.0.20250516",
    "uwsgi>=2.0.30",
]

[project.optional-dependencies]
celery = ["celery[redis] (>=5.2.7,<6.0.0)"]
datadog = ["datadog (>=0.51.0,<0.52.0)", "ddtrace (>=3.2.1,<4.0.0)"]
fastapi = ["fastapi (>=0.115.6,<0.116.0)", "uvicorn (>=0.34.0,<0.35.0)"]
flask = ["flask (>=3.0.0,<4.0.0)"]
otel = [
    "opentelemetry-api (>=1.33.1,<2.0.0)",
    "opentelemetry-sdk (>=1.33.1,<2.0.0)",
    "opentelemetry-exporter-otlp-proto-grpc (>=1.33.1,<2.0.0)",
    "opentelemetry-instrumentation-celery (>=0.56b0,<0.57)",
    "opentelemetry-instrumentation-fastapi (>=0.56b0,<0.57)",
]

[tool.coverage.report]
exclude_lines = [
    "# pragma: no cover",
    "if TYPE_CHECKING:",
]

[tool.mypy]
namespace_packages = true
explicit_package_bases = true
strict = true
show_error_codes = true
plugins = [
    "pydantic.mypy"
]

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests/unit", "tests/module", "tests"]
# Disable anyio to avoid conflict and force asyncio to load before entrypoints
# https://docs.pytest.org/en/6.2.x/writing_plugins.html#plugin-discovery-order-at-tool-startup
addopts = ["-p", "no:anyio", "-p", "asyncio"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
filterwarnings = [
    "ignore:cannot collect test class 'TestWorkController'",
]

[tool.ruff]
target-version = "py311"
exclude = [
    ".venv",
]

[tool.ruff.lint]
select = [
    "ALL"
]
ignore = [
    "COM", # flake8-commas
    "FIX", # flake8-fixme
    "TD", # flake8-todos

    "D10", # Missing docstring in ...
    "D203", # 1 blank line required before class docstring
    "D212", # Multi-line docstring summary should start at the first line
]

[tool.ruff.lint.pep8-naming]
classmethod-decorators = [
    "classmethod",
    "pydantic.field_validator",
    "pydantic.model_validator",
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "FBT001", # Boolean-typed positional argument in function definition
    "PLR0913", # Too many arguments in function definition
    "PLR2004", # Magic value used in comparison
    "S101", # Use of `assert` detected
    "S105", # Possible hardcoded password
    "S311", # Standard pseudo-random generators are not suitable for security/cryptographic purposes.
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"
