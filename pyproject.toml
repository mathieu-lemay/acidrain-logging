[tool.poetry]
name = "acidrain-logging"
version = "0.2.0"
description = "Common logging library"
authors = ["Mathieu Lemay <acidrain1@gmail.com>"]
license = "MIT"
readme = "README.md"
include = ["acidrain_logging/py.typed"]

[tool.poetry.dependencies]
python = "^3.10"
orjson = "^3.9.6"
pydantic = "^2.5.3"
pydantic-settings = "^2.1.0"
structlog = "^24.1.0"

# extra=celery
celery = { version = "^5.2.7", extras = ["redis"], optional = true }

# extra=fastapi
fastapi = { version = "^0.110.0", optional = true }
uvicorn = { version = "^0.27.0", optional = true }

# extra=flask
flask = { version = "^3.0.0", optional = true }

# extra=datadog
datadog = { version = "^0.48.0", optional = true }
ddtrace = { version = "^2.4.0", optional = true }

[tool.poetry.group.dev.dependencies]
pytest = "^8.0.0"
pytest-cov = "^4.1.0"
mypy = "^1.4.1"
celery-types = "^0.22.0"
faker = "^23.2.0"
httpx = "^0.27.0"
polyfactory = "^2.9.0"
pytest-asyncio = "^0.23.3"
pytest-docker = "^3.1.1"
pytest-freezer = "^0.4.8"
pytz = "^2024.1"
setuptools = "^69.0.3"  # HACK: Needed for PyCharm
types-pytz = "^2024.1.0.20240203"
uwsgi = "^2.0.22"

[tool.poetry.extras]
celery = ["celery"]
datadog = ["datadog", "ddtrace"]
fastapi = ["fastapi", "uvicorn"]
flask = ["flask"]

[tool.coverage.report]
exclude_lines = [
    "# pragma: no cover",
    "if TYPE_CHECKING:",
]

[tool.mypy]
namespace_packages = true
explicit_package_bases = true
strict = true
show_error_codes = true
plugins = [
    "pydantic.mypy"
]

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests/unit", "tests/module", "tests"]
# Disable anyio to avoid conflict and force asyncio to load before entrypoints
# https://docs.pytest.org/en/6.2.x/writing_plugins.html#plugin-discovery-order-at-tool-startup
addopts = ["-p", "no:anyio", "-p", "asyncio"]
asyncio_mode = "auto"

[tool.ruff]
target-version = "py311"
exclude = [
    ".venv",
]

[tool.ruff.lint]
select = [
    "ALL"
]
ignore = [
    "COM", # flake8-commas
    "FIX", # flake8-fixme
    "TD", # flake8-todos

    "ANN101", # Missing type annotation for `self` in method
    "ANN102", # Missing type annotation for `cls` in method
    "D10", # Missing docstring in ...
    "D211", # No blank lines allowed before class docstring
    "D212", # Multi-line docstring summary should start at the first line
]

[tool.ruff.lint.pep8-naming]
classmethod-decorators = [
    "classmethod",
    "pydantic.validator",
    "pydantic.field_validator",
    "pydantic.model_validator",
    "pydantic.root_validator"
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "FBT001", # Boolean-typed positional argument in function definition
    "PLR2004", # Magic value used in comparison
    "S101", # Use of `assert` detected
    "S105", # Possible hardcoded password
    "S311", # Standard pseudo-random generators are not suitable for security/cryptographic purposes.
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
